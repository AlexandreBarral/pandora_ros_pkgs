local_costmap:
  # The coordinate frame the costmap will run in
  global_frame: /map

  # The coordinate frame the costmap will reference for the base of the robot 
  robot_base_frame: /base_footprint

  # The frequency in Hz, at which the costmap will run it's update loop
  update_frequency: 4.0

  # The frequency in Hz, at which the costmap to publish display information
  publish_frequency: 4.0

  # The delay in transform(tf) that is tolerable in seconds 
  transform_tolerance: 0.5

  # If static map is used then rolling window must be false (default) and vice-versa
  static_map: false
  rolling_window: true

  # The dimensions of map in meters
  width: 4.0
  height: 4.0

  # Meters per cell
  resolution: 0.02


  plugins:
  - 
   name: obstacle_layer
   type: costmap_2d::VoxelLayer
  - 
   name: inflation_layer
   type: costmap_2d::InflationLayer

  obstacle_layer:
    observation_sources: laser kinect
    #observation_sources: laser
    # sensors and info
    laser: {data_type: LaserScan, topic: /laser/scan, marking: true, clearing: true}
    kinect: {data_type: PointCloud2, topic: /costmap/local_cropped_cloud, marking: true, clearing: true}

    # Determines the max range sensor reading(meters) that will result in an obstacle being put in the costmap
    obstacle_range: 2.5

    # The robot will attempt to clear out space in front of it up to 3.0 meters away given a sensor reading
    raytrace_range: 3.0

    # The maximum height of any obstacle to be inserted into the costmap in meters
    max_obstacle_height: 1.0

    # Whether or not to publish the underlying voxel grid for visualization purposes.
    publish_voxel_map: true

  inflation_layer:
    inflation_radius: 0.41


